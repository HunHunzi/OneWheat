(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{309:function(e,r,s){"use strict";s.r(r);var i=s(14),t=Object(i.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"promise-期约"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#promise-期约"}},[e._v("#")]),e._v(" Promise(期约)")]),e._v(" "),r("h2",{attrs:{id:"定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[e._v("#")]),e._v(" 定义")]),e._v(" "),r("p",[e._v("Promsise 是一个对象，它表示异步操作的最终的完成或者失败以及其结果值，它表示的是一次异步计算结果的未来结果")]),e._v(" "),r("h2",{attrs:{id:"描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#描述"}},[e._v("#")]),e._v(" 描述")]),e._v(" "),r("p",[e._v("通俗来说，Promise 就像一个容器，里面存放着未来才会结束返回结果的容器，返回结果只用在出口处接收就好。他使得异步方法可以像同步方法一样返回值：即返回一个 promise，在创建 promise 时不一定已知的值")]),e._v(" "),r("ul",[r("li",[e._v("promise 必然会处于下述三种状态之一\n"),r("ul",[r("li",[e._v("待定(pending),初始状态,既没有兑现，也没有被拒绝")]),e._v(" "),r("li",[e._v("已兑现(fulfuilled),操作成功完成")]),e._v(" "),r("li",[e._v("已拒绝(rejected),操作失败")])])]),e._v(" "),r("li",[e._v("promise 的状态只能从待定变成已兑现或者已拒绝，不能逆向转换，同时已兑现和已拒绝之间也不能相互转换")]),e._v(" "),r("li",[e._v("promise 对象只会被调用一次，也就是说，promise 对象的状态只会被改变一次")])]),e._v(" "),r("h2",{attrs:{id:"promise-的结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#promise-的结构"}},[e._v("#")]),e._v(" Promise 的结构")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("Promise 的构造函数接收两个参数，分别是 resolve 和 reject")])]),e._v(" "),r("li",[r("p",[e._v("then 方法是 promise 对象的原型方法，它的作用是为 promise 实例添加状态改变时的回调函数，它最多可以接收两个回调函数作为参数，第一个回调函数是 promise 对象状态变为 fulfilled 时调用，第二个回调函数是 promise 对象状态变为 rejected 时调用，其中第二个函数是可选的")])]),e._v(" "),r("li",[r("p",[e._v("通过回调里面的 resolve 和 reject 来改变 promise 的状态，resolve(data)将状态改为 fulfilled，reject(err)将状态改为 rejected")])]),e._v(" "),r("li",[r("p",[e._v("catch 方法，该方法相当于最近的 then 方法的第二个参数，指向 reject 的回调函数，另一个作用是，在执行 resolve 回调函数时，如果出错，抛出异常，不会停止运行，而是进入 catch 方法中。")])])]),e._v(" "),r("h2",{attrs:{id:"期约链"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#期约链"}},[e._v("#")]),e._v(" 期约链")]),e._v(" "),r("ul",[r("li",[e._v("期约链是指将多个期约连接起来，前一个期约的输出作为后一个期约的输入，他们之间使用 then 方法连接")]),e._v(" "),r("li",[e._v("期约链中的每个期约都是通过前一个期约的输出来决定自己的状态")]),e._v(" "),r("li",[e._v("例：fetch(URL).then(callBack1).then(callBack2).catch(rejectError)")]),e._v(" "),r("li",[e._v("对于一个异步的期约链，它的错误我们可以比喻成“沿着期约链向下流淌”，直到碰上.catch()的调用， 即使.then() 缺少返回 Promise 对象的回调函数，处理程序仍会继续到链的下一个链式调用。因此，在最终的 .catch() 之前，可以安全地省略每个链式调用中处理已拒绝状态的回调函数")]),e._v(" "),r("li",[e._v("promise 对象还定义了一个.finally 方法，该方法接收一个回调函数作为参数，不管 promise 对象最后的状态如何，都会执行该回调函数，finally 方法的回调函数不接受任何参数，也就是说，没有办法知道前面的 promise 对象的状态到底是 fulfilled 还是 rejected，这表明，finally 方法里面的操作，应该是与状态无关的，不依赖于 promise 的执行结果")])]),e._v(" "),r("h2",{attrs:{id:"期约的-resolve-解决过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#期约的-resolve-解决过程"}},[e._v("#")]),e._v(" 期约的（resolve）解决过程")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("如果 promise 的状态是 fulfilled，那么它的值就是 resolve 的参数")])]),e._v(" "),r("li",[r("p",[e._v("如果 promise 的状态是 rejected，那么它的值就是 reject 的参数")])]),e._v(" "),r("li",[r("p",[e._v("如果 promise 的状态是 pending，那么它就是异步操作，需要等到异步操作完成，才会得到最终的结果，所以在 then 方法指定的回调函数中，必须判断当前的状态，如果是 pending，就等待状态的改变反之，就立即执行回调函数\n例： let myPromise = new Promise((resolve, reject) => {\n// 模拟异步操作\nsetTimeout(() => {\n// 假设异步操作成功了，我们调用 resolve 来将 Promise 从 pending 变为 fulfilled\nresolve('成功的结果');\n}, 2000);\n});")]),e._v(" "),r("p",[e._v("myPromise.then((result) => {\nconsole.log(result); // 这里会打印 '成功的结果'\n});")])])]),e._v(" "),r("p",[e._v("resolve 函数被传递给了 Promise 的构造函数。当异步操作成功后，resolve 函数会被调用，这将使得 Promise 对象的状态变为“已决”，并且可以通过 .then() 方法获取到成功的结果。")]),e._v(" "),r("h2",{attrs:{id:"async-和-await"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#async-和-await"}},[e._v("#")]),e._v(" async 和 await")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("async\nasync 函数是返回一个 Promise 对象的函数。当调用一个 async 函数时，它会返回一个 Promise，该 Promise 将会在函数的所有代码执行完毕后被 resolved。")]),e._v(" "),r("p",[e._v("async 函数可以包含 await 表达式，它会暂停函数的执行并等待 Promise 解决。在等待期间，JavaScript 引擎可以执行其他任务，这使得程序可以保持响应性。")])]),e._v(" "),r("li",[r("p",[e._v("await\nawait 只能在 async 函数中使用。它等待一个 Promise 的解决（或拒绝），然后继续执行函数。如果 await 后面的表达式是一个 Promise，它将等待 Promise 完成，然后返回解决的值。")])])])])}),[],!1,null,null,null);r.default=t.exports}}]);